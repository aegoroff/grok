name: CI Build

env:
  GITHUB_REF: "${{ github.ref }}"
  APR_HOME16: ${{ github.workspace }}\APR\
  RELEASE_DIR: artifacts

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*" # Run when tag matches v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master ]

jobs:
  build_windows:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install Winflexbison
        run: |
          choco install winflexbison
      - name: Create generated dir
        run: |
          mkdir ${{ github.workspace }}\src\grok\generated
      - name: Download APR
        run: |
          curl -L  -o apr-vs2019.zip "https://drive.google.com/uc?export=download&id=1WeIo7YUKfouddMLVXzhAs7h9FzbRrJ75"
          7z x -o${{ env.APR_HOME16 }} apr-vs2019.zip
      - name: flex and bison
        run: |
          win_flex.exe --fast --wincompat --outfile="src/grok/generated/grok.flex.c" src/grok/grok.lex
          win_bison.exe --output="src/grok/generated/grok.tab.c" -dy src/grok/grok.y
      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
        with:
          sdk-version: 19041
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3
        with:
          vs-version: 16.11
      - name: Build
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: ${{ github.workspace }}\CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "-- -v:n -p:Configuration=Release"
          buildDirectory: ${{ runner.temp }}\build
          buildWithCMake: true
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Release -G"Visual Studio 16 2019" -Ax64 -DCMAKE_SYSTEM_VERSION=10.0.19041.0'
      - name: Unit Tests
        shell: cmd
        run: ${{ runner.temp }}\build\Release\_tst.exe
      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
      - name: Install
        run: |
          cmake --install ${{ runner.temp }}\build
          7z a -ttar -so -an ${{ runner.temp }}\build | 7z a -si .\${{ env.RELEASE_DIR }}\grok_windows_x64.tar.gz
      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: grok_windows_x64
          path: .\${{ env.RELEASE_DIR }}

  build_linux:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Create generated dir
        run: |
          mkdir ${{ github.workspace }}/src/grok/generated
      - name: Install Linux packages
        run: sudo apt update && sudo apt install -y --no-install-recommends apache2-dev libapr1-dev libaprutil1-dev
      - name: flex and bison
        run: |
          flex --fast --outfile="src/grok/generated/grok.flex.c" src/grok/grok.lex
          bison --output="src/grok/generated/grok.tab.c" -dy src/grok/grok.y
      - name: Build
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "-- -v"
          buildDirectory: ${{ runner.temp }}/build
          buildWithCMake: true
        env:
          APR_HOME: /usr/
      - name: Unit Tests
        run: ${{ runner.temp }}/build/_tst
      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
      - name: Install
        run: |
          cmake --install ${{ runner.temp }}/build
          7z a -ttar -so -an ${{ runner.temp }}/build | 7z a -si ./${{ env.RELEASE_DIR }}/grok_linux_x64.tar.gz
      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: grok_linux_x64
          path: ./${{ env.RELEASE_DIR }}

  build_macos:

    runs-on: macos-11

    steps:
      - uses: actions/checkout@v2
      - name: Create generated dir
        run: |
          mkdir ${{ github.workspace }}/src/grok/generated
      - name: install tools and libs
        run: |
          brew install apr
          brew install apr-util
          brew install flex
          brew install bison
      - name: flex and bison
        run: |
          export PATH="/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH"
          flex --fast --outfile="src/grok/generated/grok.flex.c" src/grok/grok.lex
          bison --output="src/grok/generated/grok.tab.c" -dy src/grok/grok.y
      - name: Build
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "-- -v"
          buildDirectory: ${{ runner.temp }}/build
          buildWithCMake: true
        env:
          APR_HOME: /usr/local/opt/
          CMAKE_INCLUDE_PATH: /usr/local/opt/flex/include
          CMAKE_LIBRARY_PATH: /usr/local/opt/flex/lib;/usr/local/opt/bison/lib
      - name: Unit Tests
        run: ${{ runner.temp }}/build/_tst
      - name: Install p7zip (MacOS)
        run: brew install p7zip
      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
      - name: Install
        run: |
          cmake --install ${{ runner.temp }}/build
          7z a -ttar -so -an ${{ runner.temp }}/build | 7z a -si ./${{ env.RELEASE_DIR }}/grok_osx_x64.tar.gz
      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: grok_osx_x64
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: GitHub Release
    needs: [ build_windows, build_macos, build_linux ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Linux tarball
        uses: actions/download-artifact@v1
        with:
          name: grok_linux_x64

      - name: Download Windows zip
        uses: actions/download-artifact@v1
        with:
          name: grok_windows_x64

      - name: Download MacOS zip
        uses: actions/download-artifact@v1
        with:
          name: grok_osx_x64

      - name: Release Linux tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./grok_linux_x64/grok_linux_x64.tar.gz
          asset_content_type: application/gzip
          asset_name: grok_linux_x64.tar.gz

      - name: Release Windows zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./grok_windows_x64/grok_windows_x64.tar.gz
          asset_content_type: application/gzip
          asset_name: grok_windows_x64.tar.gz

      - name: Release MacOS tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./grok_osx_x64/grok_osx_x64.tar.gz
          asset_content_type: application/gzip
          asset_name: grok_osx_x64.tar.gz
